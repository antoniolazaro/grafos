@startuml

title __MANYAPRROACHES's Class Diagram__\n

  namespace br.ufba.mestrado.algoritimos.grafos {
    namespace manyaprroaches {
      class br.ufba.mestrado.algoritimos.grafos.manyaprroaches.Edge {
          - counted : boolean
          + Edge()
          + Edge()
          + Edge()
          + Edge()
          + Edge()
          + Edge()
          + getCounted()
          + getVertex1()
          + getVertex2()
          + hasVertex()
          + setCounted()
          + toString()
      }
    }
  }
  

  namespace br.ufba.mestrado.algoritimos.grafos {
    namespace manyaprroaches {
      class br.ufba.mestrado.algoritimos.grafos.manyaprroaches.Graph {
          - edges : ArrayList<Edge>
          - vertices : ArrayList<Vertex>
          + Graph()
          + Graph()
          + toString()
          # getEdges()
          # getVertex()
          # getVertices()
          # numVertices()
      }
    }
  }
  

  namespace br.ufba.mestrado.algoritimos.grafos {
    namespace manyaprroaches {
      class br.ufba.mestrado.algoritimos.grafos.manyaprroaches.MaximalIndependentSet {
          - edges : Map<Pair<Integer, Integer>, Integer>
          - independentSets : Set<Set<Integer>>
          - maximalIndependentSets : Set<Set<Integer>>
          - vertices : List<Integer>
          + MaximalIndependentSet()
          {static} + main()
          ~ findAllIndependentSets()
          ~ isSafeForIndependentSet()
          ~ printAllIndependentSets()
          ~ printMaximalIndependentSets()
      }
    }
  }
  

  namespace br.ufba.mestrado.algoritimos.grafos {
    namespace manyaprroaches {
      class br.ufba.mestrado.algoritimos.grafos.manyaprroaches.Vertex {
          - vertex : int
          + Vertex()
          + Vertex()
          + equals()
          + hashCode()
          + toString()
          # getValue()
      }
    }
  }
  

  namespace br.ufba.mestrado.algoritimos.grafos {
    namespace manyaprroaches {
      class br.ufba.mestrado.algoritimos.grafos.manyaprroaches.VertexCover {
          ~ possibleCovers : ArrayList<ArrayList<Vertex>>
          - cover : ArrayList<Vertex>
          - k : int
          - min : int
          + VertexCover()
          # approxCover()
          # approxCoverModified()
          # bruteForce()
          # combinations()
          # firstSolution()
          # getMaxDegree()
          # greedyCover()
          # greedyCoverModified()
          # maximalIndependent()
          # optimizedBruteForce()
          # optimizedBruteForce()
          # removeEdges()
          - approxCoverAlgorithm()
          - calculateRepetitionOnEdge()
          - greeyCoverAlgorithm()
      }
    }
  }
  

  namespace br.ufba.mestrado.algoritimos.grafos {
    namespace manyaprroaches {
      class br.ufba.mestrado.algoritimos.grafos.manyaprroaches.VertexCoverTester {
          {static} + main()
          {static} - experimento1()
          {static} - experimento2()
      }
    }
  }
  

  br.ufba.mestrado.algoritimos.grafos.manyaprroaches.Edge o-- br.ufba.mestrado.algoritimos.grafos.manyaprroaches.Vertex : vertex1
  br.ufba.mestrado.algoritimos.grafos.manyaprroaches.Edge o-- br.ufba.mestrado.algoritimos.grafos.manyaprroaches.Vertex : vertex2
  br.ufba.mestrado.algoritimos.grafos.manyaprroaches.VertexCover o-- br.ufba.mestrado.algoritimos.grafos.manyaprroaches.Graph : graph


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
